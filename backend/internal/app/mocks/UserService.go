// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/DmytroKha/nix-chat/internal/domain"
	database "github.com/DmytroKha/nix-chat/internal/infra/database"

	mock "github.com/stretchr/testify/mock"

	requests "github.com/DmytroKha/nix-chat/internal/infra/http/requests"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// ChangeName provides a mock function with given fields: id, name
func (_m *UserService) ChangeName(id int64, name string) (database.User, error) {
	ret := _m.Called(id, name)

	var r0 database.User
	if rf, ok := ret.Get(0).(func(int64, string) database.User); ok {
		r0 = rf(id, name)
	} else {
		r0 = ret.Get(0).(database.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(id, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangePassword provides a mock function with given fields: id, cpr
func (_m *UserService) ChangePassword(id int64, cpr requests.ChangePasswordRequest) (database.User, error) {
	ret := _m.Called(id, cpr)

	var r0 database.User
	if rf, ok := ret.Get(0).(func(int64, requests.ChangePasswordRequest) database.User); ok {
		r0 = rf(id, cpr)
	} else {
		r0 = ret.Get(0).(database.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, requests.ChangePasswordRequest) error); ok {
		r1 = rf(id, cpr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: id
func (_m *UserService) Find(id int64) (database.User, error) {
	ret := _m.Called(id)

	var r0 database.User
	if rf, ok := ret.Get(0).(func(int64) database.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(database.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: name
func (_m *UserService) FindByName(name string) (database.User, error) {
	ret := _m.Called(name)

	var r0 database.User
	if rf, ok := ret.Get(0).(func(string) database.User); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(database.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GeneratePasswordHash provides a mock function with given fields: password
func (_m *UserService) GeneratePasswordHash(password string) (string, error) {
	ret := _m.Called(password)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserBlackList provides a mock function with given fields: user
func (_m *UserService) GetUserBlackList(user domain.User) ([]domain.User, error) {
	ret := _m.Called(user)

	var r0 []domain.User
	if rf, ok := ret.Get(0).(func(domain.User) []domain.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserFriends provides a mock function with given fields: user
func (_m *UserService) GetUserFriends(user domain.User) ([]domain.User, error) {
	ret := _m.Called(user)

	var r0 []domain.User
	if rf, ok := ret.Get(0).(func(domain.User) []domain.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadAvatar provides a mock function with given fields: user
func (_m *UserService) LoadAvatar(user database.User) (database.User, error) {
	ret := _m.Called(user)

	var r0 database.User
	if rf, ok := ret.Get(0).(func(database.User) database.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(database.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(database.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: user
func (_m *UserService) Save(user database.User) (database.User, error) {
	ret := _m.Called(user)

	var r0 database.User
	if rf, ok := ret.Get(0).(func(database.User) database.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(database.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(database.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, usr
func (_m *UserService) Update(id int64, usr requests.UserRequest) (database.User, error) {
	ret := _m.Called(id, usr)

	var r0 database.User
	if rf, ok := ret.Get(0).(func(int64, requests.UserRequest) database.User); ok {
		r0 = rf(id, usr)
	} else {
		r0 = ret.Get(0).(database.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, requests.UserRequest) error); ok {
		r1 = rf(id, usr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
