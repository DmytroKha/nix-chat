// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	database "github.com/DmytroKha/nix-chat/internal/infra/database"
	mock "github.com/stretchr/testify/mock"
)

// FriendlistService is an autogenerated mock type for the FriendlistService type
type FriendlistService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *FriendlistService) Delete(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: userId, roomId
func (_m *FriendlistService) Find(userId int64, roomId int64) (database.Friendlist, error) {
	ret := _m.Called(userId, roomId)

	var r0 database.Friendlist
	if rf, ok := ret.Get(0).(func(int64, int64) database.Friendlist); ok {
		r0 = rf(userId, roomId)
	} else {
		r0 = ret.Get(0).(database.Friendlist)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(userId, roomId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: userId
func (_m *FriendlistService) FindAll(userId int64) ([]database.Friendlist, error) {
	ret := _m.Called(userId)

	var r0 []database.Friendlist
	if rf, ok := ret.Get(0).(func(int64) []database.Friendlist); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Friendlist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: bl
func (_m *FriendlistService) Save(bl database.Friendlist) (database.Friendlist, error) {
	ret := _m.Called(bl)

	var r0 database.Friendlist
	if rf, ok := ret.Get(0).(func(database.Friendlist) database.Friendlist); ok {
		r0 = rf(bl)
	} else {
		r0 = ret.Get(0).(database.Friendlist)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(database.Friendlist) error); ok {
		r1 = rf(bl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFriendlistService interface {
	mock.TestingT
	Cleanup(func())
}

// NewFriendlistService creates a new instance of FriendlistService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFriendlistService(t mockConstructorTestingTNewFriendlistService) *FriendlistService {
	mock := &FriendlistService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
