// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/DmytroKha/nix-chat/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// RoomService is an autogenerated mock type for the RoomService type
type RoomService struct {
	mock.Mock
}

// FindAll provides a mock function with given fields:
func (_m *RoomService) FindAll() ([]domain.Room, error) {
	ret := _m.Called()

	var r0 []domain.Room
	if rf, ok := ret.Get(0).(func() []domain.Room); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Room)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: name
func (_m *RoomService) FindByName(name string) (domain.Room, error) {
	ret := _m.Called(name)

	var r0 domain.Room
	if rf, ok := ret.Get(0).(func(string) domain.Room); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Room)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: room
func (_m *RoomService) Save(room domain.Room) (domain.Room, error) {
	ret := _m.Called(room)

	var r0 domain.Room
	if rf, ok := ret.Get(0).(func(domain.Room) domain.Room); ok {
		r0 = rf(room)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Room)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Room) error); ok {
		r1 = rf(room)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRoomService interface {
	mock.TestingT
	Cleanup(func())
}

// NewRoomService creates a new instance of RoomService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRoomService(t mockConstructorTestingTNewRoomService) *RoomService {
	mock := &RoomService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
